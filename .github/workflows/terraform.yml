
# name: 'Terraform'

# on:
#   push:
#     branches: [ "main" ]
#   pull_request: 
#     branches: [ "main" ]
#   workflow_dispatch:
#     inputs:
#       action:
#         description: "Action to be executed"
#         required: true
#         default: "none"
#         type: choice
#         options:
#           # - "apply"
#           - "none"
#           - "destroy"

# permissions:
#   contents: read
#   pull-requests: write


# env:
#   AWS_REGION: eu-central-1
  
# jobs:
#   terraform:
#     name: 'Terraform'
#     runs-on: ubuntu-latest
#     environment: production

#     defaults:
#       run:
#         shell: bash

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4
      
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3
#       with:
#         terraform_version: "1.11.0"
    
#     - name: Terraform Init
#       run: terraform -chdir='practica-4' init

#     - name: Terraform Format
#       run: terraform -chdir='practica-4' fmt -check

#     - name: Terraform plan
#       id: plan
#       if: github.event_name == 'pull_request'
#       run: terraform -chdir='practica-4' plan -no-color -input=false
#       continue-on-error: true
    
#     - uses: actions/github-script@v6
#       if: github.event_name == 'pull_request'
#       env:
#         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#       with:
#         script: |
#           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

#           <details><summary>Show Plan</summary>

#           \`\`\`\n
#           ${process.env.PLAN}
#           \`\`\`

#           </details>
#           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

#           github.rest.issues.createComment({
#             issue_number: context.issue.number,
#             owner: context.repo.owner,
#             repo: context.repo.repo,
#             body: output
#           })

#     - name: Terraform Plan Status
#       if: steps.plan.outcome == 'failure'
#       run: exit 1

#     - name: Terraform Apply
#       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#       run: terraform -chdir='practica-4' apply -auto-approve -input=false

#     # - name: Terraform Plan
#     #   run: terraform -chdir='practica-4' plan -input=false

#     # - name: Terraform Apply (push to main)
#     #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#     #   run: terraform -chdir='practica-4' apply -auto-approve -input=false

#     - name: Terraform Apply/Destroy (manual dispatch)
#       if: github.event_name == 'workflow_dispatch' && inputs.action == 'none'
#       run: echo "No actions will be applied"

#     - name: Terraform Destroy (manual dispatch)
#       if: github.event_name == 'workflow_dispatch' && inputs.action == 'destroy'
#       run: terraform -chdir='practica-4' destroy -auto-approve -input=false
    
